plugins {
  id "war"
  id "idea"
  id "maven-publish"
  id "org.springframework.boot" version "2.1.3.RELEASE"
  id "io.spring.dependency-management" version "1.0.7.RELEASE"
  id "org.jetbrains.kotlin.jvm" version "1.3.21"
  id "org.jetbrains.kotlin.plugin.spring" version "1.3.21"
  id "com.google.protobuf" version "0.8.8"
  id "com.jfrog.bintray" version "1.8.4"
}

compileKotlin {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8

  kotlinOptions {
    jvmTarget = "1.8"
  }
}


def serviceVersion = project.hasProperty('verifierServiceProjectVersion') ? project.verifierServiceProjectVersion : '1.0'

configure(allprojects) {
  version = serviceVersion
  group = "org.jetbrains.intellij.plugins.verifier"

  idea {
    module {
      inheritOutputDirs = false
      outputDir = file("$buildDir/classes/main")
    }
  }
  
  springBoot {
    buildInfo()
  }

  protobuf {

    generatedFilesBaseDir = "$projectDir/src/generated"

    protoc {
      artifact = 'com.google.protobuf:protoc:3.4.0'
    }
  }

  def protobufJavaGeneratedDir = "${protobuf.generatedFilesBaseDir}/main/java"

  clean {
    delete protobuf.generatedFilesBaseDir
  }

  idea {
    module {
      generatedSourceDirs += file(protobufJavaGeneratedDir)
    }
  }

  sourceSets {
    main {
      java {
        srcDirs protobufJavaGeneratedDir
      }
      kotlin {
        srcDirs protobufJavaGeneratedDir
      }
    }
  }

  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://www.jetbrains.com/intellij-repository/releases" }
    maven { url "https://jetbrains.bintray.com/intellij-third-party-dependencies" }
    maven { url "https://dl.bintray.com/sergey-patrikeev/patrikeev-archiver"  }
  }

  configurations {
    developmentOnly
    runtimeClasspath {
      extendsFrom developmentOnly
    }
  }

  dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    developmentOnly "org.springframework.boot:spring-boot-devtools"

    testImplementation 'junit:junit:4.12'
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation group: 'commons-io', name: 'commons-io', version: '2.5'
    implementation 'com.github.salomonbrys.kotson:kotson:2.4.0'
    implementation 'com.google.code.gson:gson:2.7'

    implementation 'com.squareup.retrofit2:retrofit:2.1.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.1.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.3.1'

    //Simple map-database engine that allows to store maps on disk: https://github.com/jankotek/mapdb/
    implementation 'org.mapdb:mapdb:3.0.5'

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.24'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    runtimeOnly "org.codehaus.groovy:groovy:2.4.12"

    implementation "commons-fileupload:commons-fileupload:1.3.3"

    implementation group: 'org.jetbrains.intellij.plugins', name: 'intellij-feature-extractor', version: 'dev'
    implementation group: 'org.jetbrains.intellij.plugins', name: 'verifier-intellij', version: 'dev'

    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '3.4.0'
  }

}

publishToMavenLocal.dependsOn test

//Tasks defined in plugins are added after all projects are evaluated
//We have to hook after the evaluation to prevent an evaluation failure
project.afterEvaluate {
  compileJava.dependsOn generateProto
  compileKotlin.dependsOn generateProto
}
